{% extends 'layout.html.twig' %}

{% block title %}Discussion
{% endblock %}

{% block body %}
	<div class="homeSection">
		<div class="row justify-content-center p-3 w-100 m-0">
			<div class="col col-md-4 col-lg-8 loginBlock h-100 p-2">
				<div class="d-flex justify-content-between h-100 chat-title-bar p-2 mb-1">
					{% if discussion.offer %}
						<div>
							<h2 class="cmnty mb-1">{{ discussion.offer.title }}</h2>
							<p class="text-muted m-0">
								<i class="fas fa-map-marker-alt" style="color: #3f51b5"></i>
								{{ discussion.offer.city }}
							</p>
						</div>
						<a href="{{ path('offers_show', {'id': discussion.offer.id}) }}" class="discussion-link">
							{% if discussion.offer.pictures is not empty %}
								<img src="{{ asset('bends/images/offers/') }}{{ discussion.offer.pictures[0] }}" class="img-thumbnail miniature mx-1" alt="miniature">
							{% else %}
								<img src="{{ asset('build/images/picture-no-image.jpg') }}" class="img-thumbnail miniature mx-1" alt="photo">
							{% endif %}
						</a>
					{% else %}
						<div class="alert alert-info box-shadow">
							<p>** Annonce supprimée **</p>
						</div>
						<img src="{{ asset('build/images/picture-no-image.jpg') }}" class="img-thumbnail miniature mx-1" alt="photo">
					{% endif %}
				</div>
				<div id="chat" class="p-2 chat-section">
					{% for message in discussion.messages %}
						{% if message.createdBy == app.user %}
							<div id="demo-test-gallery" class="d-flex justify-content-end">
								<div class="demo-gallery chat-text-user p-2 mb-2 w-75">
									{% if message.text is not null %}
										<div>
											{{ message.text }}
										</div>
									{% endif %}
									{% if message.file is not empty %}
										<a href="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" data-size="1024x1024" data-med="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" data-med-size="1024x1024" class="demo-gallery__img--main">
											<img src="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" class="image-sent" itemprop="thumbnail" alt="photo">
										</a>
									{% endif %}
								</div>
							</div>
						{% else %}
							<div class="d-flex justify-content-start">
								<div class="demo-gallery chat-text-member p-2 mb-2 w-75">
									{% if message.text is not null %}
										<div>
											{{ message.text }}
										</div>
									{% endif %}
									{% if message.file is not empty %}
										<a href="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" data-size="1024x1024" data-med="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" data-med-size="1024x1024" class="demo-gallery__img--main">
											<img src="{{ asset('bends/images/messages/') }}{{ message.file[0] }}" class="image-sent" itemprop="thumbnail" alt="photo">
										</a>
									{% endif %}

								</div>
							</div>
						{% endif %}
					{% endfor %}
				</div>
				<!-- Root element of PhotoSwipe. Must have class pswp. -->
				<div
					class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

					<!-- Background of PhotoSwipe. It's a separate element, as animating opacity is faster than rgba(). -->
					<div class="pswp__bg"></div>

					<!-- Slides wrapper with overflow:hidden. -->
					<div class="pswp__scroll-wrap">

						<!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
						<!-- don't modify these 3 pswp__item elements, data is added later on. -->
							<div class="pswp__container"> <div class="pswp__item"></div>
							<div class="pswp__item"></div>
							<div class="pswp__item"></div>
						</div>

						<!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
						<div class="pswp__ui pswp__ui--hidden">

							<div
								class="pswp__top-bar">

								<!--  Controls are self-explanatory. Order can be changed. -->

								<div class="pswp__counter"></div>

								<button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

								<button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

								<button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

								<!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
								<!-- element will get class pswp__preloader--active when preloader is running -->
								<div class="pswp__preloader">
									<div class="pswp__preloader__icn">
										<div class="pswp__preloader__cut">
											<div class="pswp__preloader__donut"></div>
										</div>
									</div>
								</div>
							</div>

							<div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
								<div class="pswp__share-tooltip"></div>
							</div>

							<button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

							<button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

							<div class="pswp__caption">
								<div class="pswp__caption__center"></div>
							</div>

						</div>

					</div>

				</div>
				<form id="messageForm" class="bg-white d-flex p-2">
					<div class="file-selector d-flex align-items-center">
						<i class="far fa-file-image cursorPointer" onclick="addFile()"></i>
						<input type="file" id="fname" name="fname" accept="image/x-png,image/gif,image/jpeg" hidden>
					</div>
					<div class="flex-grow-1 mx-1">
						<textarea name="message" id="message" placeholder="Votre message ici ..." class="form-control"></textarea>
					</div>
					<div class="d-flex align-items-center">
						<button id="submitBtn" class="btn btn-primary">Envoyer</button>
					</div>
				</form>
				<div class="text-center">
					<button type="button" class="btn btn-outline-danger btn-sm" data-toggle="modal" data-target="#signalModal">
						Signaler
					</button>
				</div>

				<!-- Modal signal -->
				<div class="modal fade" id="signalModal" tabindex="-1" role="dialog" aria-labelledby="signalModalLabel" aria-hidden="true">
					<div class="modal-dialog" role="document">
						<div class="modal-content">
							<div class="modal-header">
								<h2 class="loginTitle" id="exampleModalLabel">Signaler la conversation</h2>
								<button type="button" class="close" data-dismiss="modal" aria-label="Close">
									<span aria-hidden="true">&times;</span>
								</button>
							</div>
							<div class="modal-body">
								<p>
									Vous constatez que la conversation ne respecte pas les règles definies dans nos
									<a href="{{ path('legal_CGU') }}" target="_blank">conditions générales d'utilisation</a>?</p>
								<ul class="text-muted">
									<li>
										<small>Propos interdits (insultes, propos racistes, homophobie, ...).</small>
									</li>
									<li>
										<small>Conversation à but de transaction financière.</small>
									</li>
									<li>
										<small>Autres cas définis dans nos conditions d'utilisations.</small>
									</li>
								</ul>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
								<a href="{{ path('messages_discussion_signal', {id: discussion.id}) }}" class="btn btn-danger">Signaler</a>
							</div>
						</div>
					</div>
				</div>

			</div>
		</div>
	</div>

	<script type="text/javascript">
		let id = 1;
document.getElementById("messageForm").addEventListener('submit', onSubmit);

function onSubmit(event) {
event.preventDefault();

let messageForm = new FormData(this);
let message = document.getElementById("message");
let file = document.getElementById("fname");
let chat = document.getElementById("chat");

if (message.value === '' && file.value === '') {
swal({title: "Message vide", icon: "error"});
} else {
if (file.value !== '' && file.files[0].size > 2000000) {
swal({title: "Fichier trop volumineux", text: "Le fichier ne doit pas dépasser 2 Mb", icon: "error"});
} else {
document.getElementById("submitBtn").disabled = true;
$.ajax({
url: "{{ path('messages_discussion_message', {'id': discussion.id}) }}",
type: 'POST',
data: messageForm,
cache: false,
contentType: false,
processData: false,
beforeSend: function() {
	document.getElementById("loader").classList.remove('d-none');
},
success: function () {
document.getElementById("loader").classList.add('d-none');
document.getElementById("submitBtn").disabled = false;
let chatDiv = document.createElement('div');
chatDiv.className = 'd-flex justify-content-end';
let textDiv = document.createElement('div');
textDiv.className = 'chat-text-user p-2 mb-2 w-75';
textDiv.innerHTML = message.value;

if (file.value !== '') {
let reader = new FileReader();
let uploadedFile = $("input[type=file]").get(0).files[0];
let img = document.createElement('img');
img.id = 'newImg' + id;
img.className = 'image-sent';
img.alt = 'photo';
textDiv.append(img);
reader.onload = function () {
img.src = (reader.result);
}

reader.readAsDataURL(uploadedFile);
}

chatDiv.append(textDiv);
chat.append(chatDiv);

message.value = '';
file.value = '';
id++;
},
error: function () {
alert('error');
}
})
}

}
}

function scrollToBottom() {
document.querySelector(".chat-section").scroll(0, 10000);
}

scrollToBottom();

function addFile() {
document.querySelector("#fname").click()
}

try {
Typekit.load();
} catch (e) {}(function () {

var initPhotoSwipeFromDOM = function (gallerySelector) {

var parseThumbnailElements = function (el) {
var thumbElements = el.childNodes,
numNodes = thumbElements.length,
items = [],
el,
childElements,
thumbnailEl,
size,
item;

for (var i = 0; i < numNodes; i++) {
el = thumbElements[i];

// include only element nodes
if (el.nodeType !== 1) {
continue;
}

childElements = el.children;

size = el.getAttribute('data-size') === null ? el.parentElement.children[1].getAttribute('data-size').split('x') : el.getAttribute('data-size').split('x');

// create slide object
item = {
src: el.getAttribute('href'),
w: parseInt(size[0], 10),
h: parseInt(size[1], 10),
author: el.getAttribute('data-author')
};

item.el = el; // save link to element for getThumbBoundsFn

if (childElements.length > 0) {
item.msrc = childElements[0].getAttribute('src'); // thumbnail url
if (childElements.length > 1) {
item.title = childElements[1].innerHTML; // caption (contents of figure)
}
}

var mediumSrc = el.getAttribute('data-med');
if (mediumSrc) {
size = el.getAttribute('data-med-size').split('x');
// "medium-sized" image
item.m = {
src: mediumSrc,
w: parseInt(size[0], 10),
h: parseInt(size[1], 10)
};
}
// original image
item.o = {
src: item.src,
w: item.w,
h: item.h
};

items.push(item);
}

return items;
};

// find nearest parent element
var closest = function closest(el, fn) {
return el && (fn(el) ? el : closest(el.parentNode, fn));
};

var onThumbnailsClick = function (e) {
e = e || window.event;
e.preventDefault ? e.preventDefault() : e.returnValue = false;

var eTarget = e.target || e.srcElement;

var clickedListItem = closest(eTarget, function (el) {
return el.tagName === 'A';
});

if (! clickedListItem) {
return;
}

var clickedGallery = clickedListItem.parentNode;

var childNodes = clickedListItem.parentNode.childNodes,
numChildNodes = childNodes.length,
nodeIndex = 0,
index;

for (var i = 0; i < numChildNodes; i++) {
if (childNodes[i].nodeType !== 1) {
continue;
}

if (childNodes[i] === clickedListItem) {
index = nodeIndex;
break;
}
nodeIndex++;
}

if (index >= 0) {
openPhotoSwipe(index, clickedGallery);
}
return false;
};

var photoswipeParseHash = function () {
var hash = window.location.hash.substring(1),
params = {};

if (hash.length < 5) { // pid=1
return params;
}

var vars = hash.split('&');
for (var i = 0; i < vars.length; i++) {
if (! vars[i]) {
continue;
}
var pair = vars[i].split('=');
if (pair.length < 2) {
continue;
}
params[pair[0]] = pair[1];
}

if (params.gid) {
params.gid = parseInt(params.gid, 10);
}

return params;
};

var openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {
var pswpElement = document.querySelectorAll('.pswp')[0],
gallery,
options,
items;

items = parseThumbnailElements(galleryElement);

// define options (if needed)
options = {

galleryUID: galleryElement.getAttribute('data-pswp-uid'),

getThumbBoundsFn: function (index) { // See Options->getThumbBoundsFn section of docs for more info
var thumbnail = items[index].el.children[0],
pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
rect = thumbnail.getBoundingClientRect();

return {
x: rect.left,
y: rect.top + pageYScroll,
w: rect.width
};
},

addCaptionHTMLFn: function (item, captionEl, isFake) {
if (! item.title) {
captionEl.children[0].innerText = '';
return false;
}
captionEl.children[0].innerHTML = item.title + '<br/><small>Photo: ' + item.author + '</small>';
return true;
}

};

if (fromURL) {
if (options.galleryPIDs) {
// parse real index when custom PIDs are used
// http://photoswipe.com/documentation/faq.html#custom-pid-in-url
for (var j = 0; j < items.length; j++) {
if (items[j].pid == index) {
options.index = j;
break;
}
}
} else {
options.index = parseInt(index, 10) - 1;
}
} else {
options.index = parseInt(index, 10);
}

// exit if index not found
if (isNaN(options.index)) {
return;
}

var radios = document.getElementsByName('gallery-style');
for (var i = 0, length = radios.length; i < length; i++) {
if (radios[i].checked) {
if (radios[i].id == 'radio-all-controls') {} else if (radios[i].id == 'radio-minimal-black') {
options.mainClass = 'pswp--minimal--dark';
options.barsSize = {
top: 0,
bottom: 0
};
options.captionEl = false;
options.fullscreenEl = false;
options.shareEl = false;
options.bgOpacity = 0.85;
options.tapToClose = true;
options.tapToToggleControls = false;
}
break;
}
}

if (disableAnimation) {
options.showAnimationDuration = 0;
}

// Pass data to PhotoSwipe and initialize it
gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);

// see: http://photoswipe.com/documentation/responsive-images.html
var realViewportWidth,
useLargeImages = false,
firstResize = true,
imageSrcWillChange;

gallery.listen('beforeResize', function () {

var dpiRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;
dpiRatio = Math.min(dpiRatio, 2.5);
realViewportWidth = gallery.viewportSize.x * dpiRatio;

if (realViewportWidth >= 1200 || (! gallery.likelyTouchDevice && realViewportWidth > 800) || screen.width > 1200) {
if (! useLargeImages) {
useLargeImages = true;
imageSrcWillChange = true;
}

} else {
if (useLargeImages) {
useLargeImages = false;
imageSrcWillChange = true;
}
}

if (imageSrcWillChange && ! firstResize) {
gallery.invalidateCurrItems();
}

if (firstResize) {
firstResize = false;
}

imageSrcWillChange = false;

});

gallery.listen('gettingData', function (index, item) {
item.src = item.o.src;
item.w = item.o.w;
item.h = item.o.h;
});

gallery.init();
};

// select all gallery elements
var galleryElements = document.querySelectorAll(gallerySelector);
for (var i = 0, l = galleryElements.length; i < l; i++) {
galleryElements[i].setAttribute('data-pswp-uid', i + 1);
galleryElements[i].onclick = onThumbnailsClick;
}

// Parse URL and open gallery if it contains #&pid=3&gid=1
var hashData = photoswipeParseHash();
if (hashData.pid && hashData.gid) {
openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
}
};

initPhotoSwipeFromDOM('.demo-gallery');

})();
	</script>
{% endblock %}
